{"version":3,"file":"fre.js","sources":["../src/h.js","../src/dom.js","../src/hooks.js","../src/heapify.js","../src/scheduler.js","../src/reconciler.js"],"sourcesContent":["export function h (type, attrs) {\n  let props = attrs || {}\n  let key = props.key || null\n  let children = []\n\n  for (let i = 2; i < arguments.length; i++) {\n    let vnode = arguments[i]\n    if (vnode == null || vnode === true || vnode === false) {\n    } else if (typeof vnode === 'number' || typeof vnode === 'string') {\n      children.push({ type: 'text', props: { nodeValue: vnode } })\n    } else {\n      children.push(vnode)\n    }\n  }\n\n  if (children.length) {\n    props.children = children.length === 1 ? children[0] : children\n  }\n\n  delete props.key\n  return { type, props, key }\n}\n","import { SVG } from './reconciler'\n\nfunction updateProperty (dom, name, value, newValue) {\n  if (name === 'style') {\n    for (let key in value) if (!newValue[key]) dom[name][key] = ''\n    for (let key in newValue) dom[name][key] = newValue[key]\n  } else if (name[0] === 'o' && name[1] === 'n') {\n    name = name.slice(2).toLowerCase()\n    if (value) dom.removeEventListener(name, value)\n    dom.addEventListener(name, newValue)\n  } else if (name in dom && !(dom instanceof SVGElement)) {\n    dom[name] = newValue == null ? '' : newValue\n  } else if (newValue == null || newValue === false) {\n    dom.removeAttribute(name)\n  } else {\n    dom.setAttribute(name, newValue)\n  }\n}\n\nexport function updateElement (dom, props, newProps) {\n  Object.keys(newProps)\n    .filter(isNew(props, newProps))\n    .forEach(key => updateProperty(dom, key, props[key], newProps[key]))\n}\n\nexport function createElement (fiber) {\n  const dom =\n    fiber.type === 'text'\n      ? document.createTextNode('')\n      : fiber.tag === SVG\n        ? document.createElementNS('http://www.w3.org/2000/svg', fiber.type)\n        : document.createElement(fiber.type)\n  updateElement(dom, [], fiber.props)\n  return dom\n}\n\nconst isNew = (o, n) => k => k !== 'children' && o[k] !== n[k]","import { scheduleWork, getWIP } from './reconciler'\nlet cursor = 0\n\nfunction update (key, reducer, value) {\n  const current = this ? this : getWIP()\n  value = reducer ? reducer(current.state[key], value) : value\n  current.state[key] = value\n  scheduleWork(current)\n}\nexport function resetCursor () {\n  cursor = 0\n}\nexport function useState (initState) {\n  return useReducer(null, initState)\n}\nexport function useReducer (reducer, initState) {\n  let current = getWIP() || {}\n  let key = '$' + cursor\n  let setter = update.bind(current, key, reducer)\n  cursor++\n  let state = current.state || {}\n  if (key in state) {\n    return [state[key], setter]\n  } else {\n    current.state[key] = initState\n    return [initState, setter]\n  }\n}\n\nexport function useEffect (cb, inputs) {\n  let current = getWIP() || {}\n  let key = '$' + cursor\n  current.effect = current.effects || {}\n  current.effect[key] = useCallback(cb, inputs)\n  cursor++\n}\n\nexport function useCallback (cb, inputs) {\n  return useMemo(() => cb, inputs)\n}\n\nexport function useMemo (cb, inputs) {\n  let current = getWIP() || {}\n  let isChange = inputs\n    ? (current.oldInputs || []).some((v, i) => inputs[i] !== v)\n    : true\n  if (inputs && !inputs.length && !current.isMounted) {\n    isChange = true\n    current.isMounted = true\n  }\n  current.oldInputs = inputs\n\n  return isChange || !current.isMounted ? (current.memo = cb()) : current.memo\n}\n","function push (heap, node) {\r\n  let index = heap.length\r\n  heap.push(node)\r\n\r\n  while (true) {\r\n    let parentIndex = Math.floor((index - 1) / 2)\r\n    let parent = heap[parentIndex]\r\n\r\n    if (parent && compare(parent, node) > 0) {\r\n      heap[parentIndex] = node\r\n      heap[index] = parent\r\n      index = parentIndex\r\n    } else return\r\n  }\r\n}\r\n\r\nfunction pop (heap) {\r\n  let first = heap[0]\r\n  if (first) {\r\n    let last = heap.pop()\r\n    if (first !== last) {\r\n      heap[0] = last\r\n      let index = 0\r\n      let length = heap.length\r\n\r\n      while (index < length) {\r\n        let leftIndex = (index + 1) * 2 - 1\r\n        let left = heap[leftIndex]\r\n        let rightIndex = leftIndex + 1\r\n        let right = heap[rightIndex]\r\n\r\n        if (left && compare(left, last) < 0) {\r\n          if (right && compare(right, left) < 0) {\r\n            heap[index] = right\r\n            heap[rightIndex] = last\r\n            index = rightIndex\r\n          } else {\r\n            heap[index] = left\r\n            heap[leftIndex] = last\r\n            index = leftIndex\r\n          }\r\n        } else if (right && compare(right, last) < 0) {\r\n          heap[index] = right\r\n          heap[rightIndex] = last\r\n          index = rightIndex\r\n        } else return\r\n      }\r\n    }\r\n    return first\r\n  } else return null\r\n}\r\n\r\nfunction compare (a, b) {\r\n  return a.dueTime - b.dueTime\r\n}\r\n\r\nfunction peek (heap) {\r\n  return heap[0] || null\r\n}\r\n\r\nexport { push, peek, pop }\r\n","import { push, pop, peek } from './heapify'\n\nlet taskQueue = []\nlet currentTask = null\nlet currentCallback = null\nlet inMC = false\nlet frameLength = 5\nlet frameDeadline = 0\n\nexport function scheduleCallback (callback) {\n  const currentTime = getTime()\n  let startTime = currentTime\n  let timeout = 5000 // idle\n  let dueTime = startTime + timeout\n\n  let newTask = {\n    callback,\n    startTime,\n    dueTime\n  }\n\n  push(taskQueue, newTask)\n\n  requestHostCallback(flushWork)\n\n  return newTask\n}\nfunction requestHostCallback (cb) {\n  currentCallback = cb\n  if (!inMC) {\n    inMC = true\n    planWork()\n  }\n}\nfunction flushWork (iniTime) {\n  try {\n    return workLoop(iniTime)\n  } finally {\n    currentTask = null\n  }\n}\n\nfunction workLoop (iniTime) {\n  let currentTime = iniTime\n  currentTask = peek(taskQueue)\n\n  while (currentTask) {\n    if (currentTask.dueTime > currentTime && shouldYeild()) break\n    let callback = currentTask.callback\n    if (callback) {\n      currentTask.callback = null\n      let next = callback()\n      if (next) {\n        currentTask.callback = next\n      } else {\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue)\n        }\n      }\n    } else pop(taskQueue)\n    currentTask = peek(taskQueue)\n  }\n\n  return !!currentTask\n}\n\nfunction performWork () {\n  if (currentCallback) {\n    let currentTime = getTime()\n    frameDeadline = currentTime + frameLength\n    let moreWork = currentCallback(currentTime)\n    if (!moreWork) {\n      inMC = false\n      currentCallback = null\n    } else {\n      planWork()\n    }\n  } else inMC = false\n}\n\nconst planWork = (() => {\n  if (typeof MessageChannel !== \"undefined\") {\n    const channel = new MessageChannel()\n    const port = channel.port2\n    channel.port1.onmessage = performWork\n\n    return () => port.postMessage(null)\n  }\n\n  return () => setTimeout(performWork, 0)\n})()\n\nexport function shouldYeild () {\n  return getTime() > frameDeadline\n}\n\nconst getTime = () => performance.now()","import { createElement, updateElement } from './dom'\r\nimport { resetCursor } from './hooks'\r\nimport { scheduleCallback, shouldYeild } from './scheduler'\r\n\r\nconst options = {}\r\nexport const [HOST, HOOK, ROOT, SVG, PLACE, UPDATE, DELETE] = [0, 1, 2, 3, 4, 5, 6]\r\n\r\nlet nextWork = null\r\nlet pendingCommit = null\r\nlet currentFiber = null\r\n\r\nfunction render (vnode, node, done) {\r\n  let rootFiber = {\r\n    tag: ROOT,\r\n    node,\r\n    props: { children: vnode },\r\n    done\r\n  }\r\n  scheduleWork(rootFiber)\r\n}\r\n\r\nfunction scheduleWork (fiber) {\r\n  nextWork = fiber\r\n  scheduleCallback(performWork)\r\n}\r\n\r\nfunction performWork () {\r\n  while (nextWork && !shouldYeild()) {\r\n    nextWork = performNext(nextWork)\r\n  }\r\n\r\n  if (pendingCommit) {\r\n    options.commitWork\r\n      ? options.commitWork(pendingCommit)\r\n      : commitWork(pendingCommit)\r\n    return null\r\n  }\r\n\r\n  return performWork.bind(null)\r\n}\r\n\r\nfunction performNext (WIP) {\r\n  WIP.parentNode = getParentNode(WIP)\r\n  WIP.patches = []\r\n  WIP.tag == HOOK ? updateHOOK(WIP) : updateHost(WIP)\r\n  if (WIP.child) return WIP.child\r\n  while (WIP) {\r\n    completeWork(WIP)\r\n    if (WIP.sibling) return WIP.sibling\r\n    WIP = WIP.parent\r\n  }\r\n}\r\n\r\nfunction updateHost (WIP) {\r\n  if (!options.end && !WIP.node) {\r\n    if (WIP.type === 'svg') WIP.tag = SVG\r\n    WIP.node = createElement(WIP)\r\n  }\r\n  let p = WIP.parentNode || {}\r\n  WIP.insertPoint = p.lastFiber || null\r\n  p.lastFiber = WIP\r\n  WIP.node.lastFiber = null\r\n  reconcileChildren(WIP, WIP.props.children)\r\n}\r\n\r\nfunction getParentNode (fiber) {\r\n  let parent = fiber.parent\r\n  if (!parent) return fiber.node\r\n  while (parent.tag === HOOK) parent = parent.parent\r\n  return parent.node\r\n}\r\n\r\nfunction updateHOOK (WIP) {\r\n  WIP.props = WIP.props || {}\r\n  WIP.state = WIP.state || {}\r\n  currentFiber = WIP\r\n  resetCursor()\r\n  reconcileChildren(WIP, WIP.type(WIP.props))\r\n}\r\n\r\nfunction reconcileChildren (WIP, children) {\r\n  const oldFibers = WIP.kids\r\n  const newFibers = (WIP.kids = hashfy(children, WIP.kids))\r\n  let reused = {}\r\n\r\n  for (const k in oldFibers) {\r\n    let newFiber = newFibers[k]\r\n    let oldFiber = oldFibers[k]\r\n\r\n    if (newFiber && newFiber.type === oldFiber.type) {\r\n      reused[k] = oldFiber\r\n    } else {\r\n      oldFiber.patchTag = DELETE\r\n      WIP.patches.push(oldFiber)\r\n    }\r\n  }\r\n\r\n  let prevFiber = null\r\n  let alternate = null\r\n\r\n  for (const k in newFibers) {\r\n    let newFiber = newFibers[k]\r\n    let oldFiber = reused[k]\r\n\r\n    if (oldFiber) {\r\n      alternate = createFiber(oldFiber, { patchTag: UPDATE })\r\n      if (!options.end) newFiber.patchTag = UPDATE\r\n      newFiber = merge(alternate, newFiber)\r\n      newFiber.alternate = alternate\r\n      replace(newFiber)\r\n    } else {\r\n      newFiber = createFiber(newFiber, { patchTag: PLACE })\r\n    }\r\n\r\n    newFibers[k] = newFiber\r\n    newFiber.parent = WIP\r\n\r\n    if (prevFiber) {\r\n      prevFiber.sibling = newFiber\r\n    } else {\r\n      if (WIP.tag === SVG) newFiber.tag = SVG\r\n      WIP.child = newFiber\r\n    }\r\n    prevFiber = newFiber\r\n  }\r\n  if (prevFiber) prevFiber.sibling = null\r\n}\r\n\r\nfunction replace (fiber) {\r\n  let parent = fiber.parent\r\n  if (parent.tag == HOOK && parent.key) fiber.key = parent.key\r\n  if (fiber.key) fiber.patchTag = PLACE\r\n}\r\n\r\nfunction createFiber (vnode, data) {\r\n  data.tag = typeof vnode.type === 'function' ? HOOK : HOST\r\n  return merge(vnode, data)\r\n}\r\n\r\nfunction completeWork (fiber) {\r\n  if (!options.end && fiber.parent) {\r\n    fiber.parent.patches = (fiber.parent.patches || []).concat(\r\n      fiber.patches || [],\r\n      fiber.patchTag ? [fiber] : []\r\n    )\r\n  } else {\r\n    pendingCommit = fiber\r\n  }\r\n}\r\n\r\nfunction commitWork (WIP) {\r\n  WIP.patches.forEach(p => {\r\n    p.parent.patches = p.patches = null\r\n    commit(p)\r\n    traverse(p.effect)\r\n  })\r\n  WIP.done && WIP.done()\r\n  nextWork = pendingCommit = null\r\n}\r\n\r\nfunction traverse (fns) {\r\n  for (const k in fns) {\r\n    const fn = fns[k]\r\n    fn()\r\n  }\r\n}\r\nfunction commit (fiber) {\r\n  let parent = fiber.parentNode\r\n  let dom = fiber.node\r\n  while (!dom) dom = fiber.child.node\r\n  switch (fiber.patchTag) {\r\n    case UPDATE:\r\n      updateElement(dom, fiber.alternate.props, fiber.props)\r\n      break\r\n    case DELETE:\r\n      console.log(parent,dom)\r\n      parent.removeChild(dom)\r\n      break\r\n    default:\r\n      let point = fiber.insertPoint ? fiber.insertPoint.node : null\r\n      let after = point ? point.nextSibling : parent.firstChild\r\n      if (after === dom || fiber.tag === HOOK) return\r\n      if (after === null && dom === parent.lastChild) return\r\n      parent.insertBefore(dom, after)\r\n      break\r\n  }\r\n}\r\n\r\nfunction getWIP () {\r\n  return currentFiber || null\r\n}\r\n\r\nconst arrayfy = arr => (!arr ? [] : arr.pop ? arr : [arr])\r\n\r\nfunction hashfy (arr) {\r\n  let out = {}\r\n  let i = 0\r\n  let j = 0\r\n  arrayfy(arr).forEach(item => {\r\n    if (item.pop) {\r\n      item.forEach(item => {\r\n        let key = item.key\r\n        key\r\n          ? (out['.' + i + '.' + key] = item)\r\n          : (out['.' + i + '.' + j] = item) && j++\r\n      })\r\n      i++\r\n    } else (out['.' + i] = item) && i++\r\n  })\r\n  return out\r\n}\r\n\r\nfunction merge (a, b) {\r\n  let out = {}\r\n  for (const i in a) out[i] = a[i]\r\n  for (const i in b) out[i] = b[i]\r\n  return out\r\n}\r\n\r\nexport { render, scheduleWork, getWIP, options }\r\n"],"names":["h","type","attrs","props","key","children","i","arguments","length","vnode","push","nodeValue","updateProperty","dom","name","value","newValue","slice","toLowerCase","removeEventListener","addEventListener","SVGElement","removeAttribute","setAttribute","updateElement","newProps","Object","keys","filter","isNew","forEach","createElement","fiber","document","createTextNode","tag","SVG","createElementNS","o","n","k","cursor","update","reducer","current","this","getWIP","state","scheduleWork","resetCursor","useState","initState","useReducer","setter","bind","useEffect","cb","inputs","effect","effects","useCallback","useMemo","isChange","oldInputs","some","v","isMounted","memo","heap","node","index","parentIndex","Math","floor","parent","compare","pop","first","last","leftIndex","left","rightIndex","right","a","b","dueTime","peek","taskQueue","currentTask","currentCallback","inMC","frameLength","frameDeadline","scheduleCallback","callback","currentTime","getTime","newTask","startTime","requestHostCallback","flushWork","planWork","iniTime","workLoop","shouldYeild","next","performWork","MessageChannel","channel","port","port2","port1","onmessage","postMessage","setTimeout","performance","now","options","HOST","HOOK","ROOT","PLACE","UPDATE","DELETE","nextWork","pendingCommit","currentFiber","render","done","performNext","commitWork","WIP","parentNode","getParentNode","patches","updateHOOK","updateHost","child","completeWork","sibling","end","p","insertPoint","lastFiber","reconcileChildren","oldFibers","kids","newFibers","hashfy","reused","newFiber","oldFiber","patchTag","prevFiber","alternate","createFiber","merge","replace","data","concat","commit","traverse","fns","fn","console","log","removeChild","point","after","nextSibling","firstChild","lastChild","insertBefore","arrayfy","arr","out","j","item"],"mappings":"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"}