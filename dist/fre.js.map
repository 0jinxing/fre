{"version":3,"file":"fre.js","sources":["../src/util.js","../src/element.js","../src/hooks.js","../src/reconciler.js","../src/h.js"],"sourcesContent":["export const arrayfy = array =>\r\n  !array ? [] : Array.isArray(array) ? array : [array]\r\n\r\nexport const isNew = (prev, next) => key => prev[key] !== next[key]\r\n\r\nexport const isSame = (a, b) => a.type == b.type && a.key == b.key\r\n\r\nexport const hashfy = arr => {\r\n  let out = {}\r\n  let i = 0\r\n  arrayfy(arr).forEach(item => {\r\n    let key = ((item || {}).props || {}).key\r\n    key ? (out['.' + key] = item) : (out['.' + i] = item) && i++\r\n  })\r\n  return out\r\n}\r\n\r\nexport const extend = (a, b) => {\r\n  for (var i in b) a[i] = b[i]\r\n}\r\n\r\nexport const merge = (a, b) => {\r\n  let out = {}\r\n\r\n  for (var i in a) out[i] = a[i]\r\n  for (var i in b) out[i] = b[i]\r\n\r\n  return out\r\n}\r\n\r\nexport const rIC =\r\n  requestIdleCallback ||\r\n  ((cb, start = Date.now()) =>\r\n    setTimeout(() => {\r\n      cb({\r\n        didTimeout: false,\r\n        timeRemaining: () => Math.max(0, 50 - (Date.now() - start))\r\n      })\r\n    }, 1))\r\n\r\nexport const rAF = requestAnimationFrame || setTimeout\r\n","import { isNew } from './util'\r\n\r\nfunction updateProperty (element, name, value, newValue) {\r\n  if (name === 'children' || name === 'key') {\r\n  } else if (name === 'style') {\r\n    Object.keys(newValue).forEach(key => {\r\n      let style = !newValue || !newValue[key] ? '' : newValue[key]\r\n      element[name][key] = style\r\n    })\r\n  } else if (name[0] === 'o' && name[1] === 'n') {\r\n    name = name.slice(2).toLowerCase()\r\n    if (value) {\r\n      element.removeEventListener(name, value)\r\n    }\r\n    element.addEventListener(name, newValue)\r\n  } else {\r\n    element.setAttribute(name, newValue)\r\n  }\r\n}\r\n\r\nexport function updateElement (element, props, newProps) {\r\n  Object.keys(newProps)\r\n    .filter(isNew(props, newProps)) // 进行一层浅比较\r\n    .forEach(key => {\r\n      if (key === 'value' || key === 'nodeValue') {\r\n        element[key] = newProps[key]\r\n      } else {\r\n        updateProperty(element, key, props[key], newProps[key])\r\n      }\r\n    })\r\n}\r\n\r\nexport function createElement (fiber) {\r\n  const element =\r\n    fiber.type === 'text'\r\n      ? document.createTextNode('')\r\n      : document.createElement(fiber.type)\r\n  updateElement(element, [], fiber.props)\r\n  return element\r\n}\r\n","import { scheduleWork, getCurrentFiber } from './reconciler'\r\nlet cursor = 0\r\nlet oldInputs = []\r\nlet mounted = false\r\n\r\nfunction update (key, reducer, value) {\r\n  const current = this ? this : getCurrentFiber()\r\n  value = reducer ? reducer(current.state[key], value) : value\r\n  current.state[key] = value\r\n  scheduleWork(current)\r\n}\r\nexport function resetCursor () {\r\n  cursor = 0\r\n}\r\nexport function useState (initState) {\r\n  return useReducer(null, initState)\r\n}\r\nexport function useReducer (reducer, initState) {\r\n  let current = getCurrentFiber()\r\n  let key = '$' + cursor\r\n  let setter = update.bind(current, key, reducer)\r\n  if (!current) {\r\n    return [initState, setter]\r\n  } else {\r\n    cursor++\r\n    let state = current.state || {}\r\n    if (typeof state === 'object' && key in state) {\r\n      return [state[key], setter]\r\n    } else {\r\n      current.state[key] = initState\r\n    }\r\n    return [initState, setter]\r\n  }\r\n}\r\nexport function useEffect (effect, inputs) {\r\n  let current = getCurrentFiber()\r\n  if (current) current.effect = useMemo(effect, inputs)\r\n}\r\n\r\nexport function useMemo (create, inputs) {\r\n  return function () {\r\n    let current = getCurrentFiber()\r\n    if (current) {\r\n      let hasChaged = inputs\r\n        ? oldInputs.some((value, i) => inputs[i] !== value)\r\n        : true\r\n      if (inputs && inputs.length === 0 && !mounted) {\r\n        // 空数组只执行一次\r\n        hasChaged = true\r\n        mounted = true\r\n      }\r\n\r\n      if (hasChaged) create()\r\n      oldInputs = inputs\r\n    }\r\n  }\r\n}\r\n\r\nexport function createContext (initContext = {}) {\r\n  let context = initContext\r\n  let setters = []\r\n  const update = newContext => setters.forEach(fn => fn(newContext))\r\n\r\n  const subscribe = fn => setters.push(fn)\r\n\r\n  const unSubscribe = fn => (setters = setters.filter(f => f !== fn))\r\n\r\n  return { context, update, subscribe, unSubscribe }\r\n}\r\n\r\nexport function useContext (ctx) {\r\n  const [context, setContext] = useState(ctx.context)\r\n\r\n  ctx.subscribe(setContext)\r\n  useEffect(() => ctx.unSubscribe(setContext))\r\n\r\n  return [context, ctx.update]\r\n}\r\n","import { createElement, updateElement } from './element'\r\nimport { resetCursor } from './hooks'\r\nimport { rAF, rIC, hashfy, isSame, extend, merge } from './util'\r\n\r\nconst [HOST, HOOK, ROOT, PLACE, REPLACE, UPDATE, DELETE] = [0, 1, 2, 3, 4, 5, 6]\r\n\r\nlet updateQueue = []\r\nlet nextWork = null\r\nlet pendingCommit = null\r\nlet currentFiber = null\r\nexport let isRecycling = true\r\n\r\nexport function render (vdom, container) {\r\n  let rootFiber = {\r\n    tag: ROOT,\r\n    base: container,\r\n    props: { children: vdom }\r\n  }\r\n  updateQueue.push(rootFiber)\r\n  rIC(workLoop)\r\n}\r\n\r\nexport function scheduleWork (fiber) {\r\n  updateQueue.push(fiber)\r\n  rIC(workLoop)\r\n}\r\n\r\nfunction workLoop (deadline) {\r\n  if (!nextWork && updateQueue.length) {\r\n    const update = updateQueue.shift()\r\n    if (!update) return\r\n    nextWork = update\r\n  }\r\n  while (nextWork && deadline.timeRemaining() > 1) {\r\n    nextWork = performWork(nextWork)\r\n  }\r\n\r\n  if (nextWork || updateQueue.length > 0) rIC(workLoop)\r\n  if (pendingCommit) rAF(() => commitWork(pendingCommit))\r\n}\r\n\r\nfunction performWork (WIP) {\r\n  WIP.tag == HOOK ? updateHOOK(WIP) : updateHost(WIP)\r\n  if (WIP.child) return WIP.child\r\n  while (WIP) {\r\n    completeWork(WIP)\r\n    if (WIP.sibling) return WIP.sibling\r\n    WIP = WIP.parent\r\n  }\r\n}\r\n\r\nfunction updateHost (WIP) {\r\n  if (!WIP.base) WIP.base = createElement(WIP)\r\n  let parent = WIP.parent || {}\r\n  WIP.insertPoint = parent.oldPoint\r\n  parent.oldPoint = WIP\r\n  const newChildren = WIP.props.children\r\n  reconcileChildren(WIP, newChildren)\r\n}\r\n\r\nfunction updateHOOK (WIP) {\r\n  let instance = WIP.base\r\n  if (instance == null) {\r\n    instance = WIP.base = createInstance(WIP)\r\n  }\r\n  WIP.props = WIP.props || {}\r\n  WIP.state = WIP.state || {}\r\n  WIP.effects = WIP.effects || {}\r\n  currentFiber = WIP\r\n  resetCursor()\r\n  const newChildren = WIP.type(WIP.props)\r\n  reconcileChildren(WIP, newChildren)\r\n  currentFiber.patches = WIP.patches\r\n}\r\nfunction fiberize (children, WIP) {\r\n  return (WIP.children = hashfy(children))\r\n}\r\n\r\nfunction reconcileChildren (WIP, newChildren) {\r\n  const oldFibers = WIP.children\r\n  const newFibers = fiberize(newChildren, WIP)\r\n  let reused = {}\r\n\r\n  for (let key in oldFibers) {\r\n    let newFiber = newFibers[key]\r\n    let oldFiber = oldFibers[key]\r\n    if (newFiber && oldFiber.type === newFiber.type) {\r\n      reused[key] = oldFiber\r\n      if (newFiber.key) {\r\n        oldFiber.key = newFiber.key\r\n      }\r\n      continue\r\n    } else {\r\n      oldFiber.patchTag = DELETE\r\n      WIP.patches.push(oldFiber)\r\n    }\r\n  }\r\n\r\n  let prevFiber = null\r\n  let alternate = null\r\n\r\n  for (let key in newFibers) {\r\n    let newFiber = newFibers[key]\r\n    let oldFiber = reused[key]\r\n\r\n    if (oldFiber) {\r\n      if (isSame(oldFiber, newFiber)) {\r\n        alternate = new Fiber(oldFiber, {\r\n          patchTag: UPDATE\r\n        })\r\n\r\n        newFiber.patchTag = UPDATE\r\n        newFiber = merge(alternate, newFiber)\r\n        newFiber.alternate = alternate\r\n        if (oldFiber.key) {\r\n          newFiber.patchTag = REPLACE\r\n        }\r\n      }\r\n    } else {\r\n      newFiber = new Fiber(newFiber, {\r\n        patchTag: PLACE\r\n      })\r\n    }\r\n    newFibers[key] = newFiber\r\n    newFiber.parent = WIP\r\n\r\n    if (prevFiber) {\r\n      prevFiber.sibling = newFiber\r\n    } else {\r\n      WIP.child = newFiber\r\n    }\r\n\r\n    prevFiber = newFiber\r\n  }\r\n  if (prevFiber) prevFiber.sibling = null\r\n}\r\n\r\nfunction createInstance (fiber) {\r\n  const instance = new fiber.type(fiber.props)\r\n  instance.fiber = fiber\r\n  return instance\r\n}\r\n\r\nfunction Fiber (vnode, data) {\r\n  this.patchTag = data.patchTag\r\n  this.tag = data.tag || typeof vnode.type === 'function' ? HOOK : HOST\r\n  vnode.props = vnode.props || { nodeValue: vnode.nodeValue }\r\n  extend(this, vnode)\r\n}\r\n\r\nfunction completeWork (fiber) {\r\n  if (fiber.parent) {\r\n    fiber.parent.patches = (fiber.parent.patches || []).concat(\r\n      fiber.patches || [],\r\n      fiber.patchTag ? [fiber] : []\r\n    )\r\n  } else {\r\n    pendingCommit = fiber\r\n  }\r\n}\r\n\r\nfunction commitWork (WIP) {\r\n  WIP.patches.forEach(p => commit(p))\r\n  currentFiber.effect && currentFiber.effect()\r\n  nextWork = pendingCommit = null\r\n}\r\n\r\nfunction commit (fiber) {\r\n  if (fiber.tag == ROOT) return\r\n  let parentFiber = fiber.parent\r\n  while (parentFiber.tag == HOOK) {\r\n    parentFiber = parentFiber.parent\r\n  }\r\n  const parent = parentFiber.base\r\n  let dom = fiber.base\r\n\r\n  if (fiber.tag == HOOK) {\r\n  } else if (fiber.patchTag == UPDATE) {\r\n    updateElement(fiber.base, fiber.alternate.props, fiber.props)\r\n  } else if (fiber.patchTag == DELETE) {\r\n    deleteElement(fiber, parent)\r\n  } else {\r\n    let after = isRecycling\r\n      ? null\r\n      : fiber.insertPoint\r\n        ? fiber.patchTag == PLACE\r\n          ? fiber.insertPoint.base.nextSibling\r\n          : fiber.insertPoint.base.nextSibling || parent.firstChild\r\n        : null\r\n    if (after == dom) return\r\n    parent.insertBefore(dom, after)\r\n  }\r\n  if (dom != parent.lastChild) isRecycling = false\r\n  parentFiber.patches = fiber.patches = []\r\n}\r\n\r\nfunction deleteElement (fiber, parent) {\r\n  let node = fiber\r\n  while (true) {\r\n    if (node.tag == HOOK) {\r\n      node = node.child\r\n      continue\r\n    }\r\n    parent.removeChild(node.base)\r\n    node.patches = []\r\n    while (node != fiber && !node.sibling) node = node.parent\r\n    if (node == fiber) return\r\n    node = node.sibling\r\n  }\r\n}\r\n\r\nexport function getCurrentFiber () {\r\n  return currentFiber || null\r\n}\r\n","import { merge } from './util'\r\nexport function h (type, props) {\r\n  let rest = []\r\n  let children = []\r\n  let length = arguments.length\r\n\r\n  while (length-- > 2) rest.push(arguments[length])\r\n  while (rest.length) {\r\n    let node = rest.pop()\r\n    if (node && node.pop) {\r\n      for (length = node.length; length--;) rest.push(node[length])\r\n    } else if (node === null || node === true || node === false) {\r\n    } else {\r\n      children.push(\r\n        typeof node !== 'object'\r\n          ? { type: 'text', props: { nodeValue: node } }\r\n          : node\r\n      )\r\n    }\r\n  }\r\n  return {\r\n    type,\r\n    props: merge(props, { children }),\r\n    key: (props || {}).key || null\r\n  }\r\n}\r\n"],"names":["const","isNew","prev","next","key","isSame","a","b","type","hashfy","arr","array","out","i","Array","isArray","forEach","item","props","extend","merge","rIC","requestIdleCallback","cb","start","Date","now","setTimeout","didTimeout","timeRemaining","Math","max","rAF","requestAnimationFrame","updateElement","element","newProps","Object","keys","filter","name","value","newValue","slice","toLowerCase","removeEventListener","addEventListener","setAttribute","updateProperty","let","cursor","oldInputs","mounted","useState","initState","useReducer","reducer","current","getCurrentFiber","setter","this","state","updateQueue","push","workLoop","bind","useEffect","effect","inputs","useMemo","create","hasChaged","some","length","nextWork","pendingCommit","currentFiber","isRecycling","deadline","update","shift","performWork","patches","p","fiber","tag","ROOT","parentFiber","parent","HOOK","base","dom","patchTag","UPDATE","alternate","DELETE","node","removeChild","sibling","child","deleteElement","after","insertPoint","PLACE","nextSibling","firstChild","insertBefore","lastChild","commit","WIP","instance","createInstance","effects","newChildren","reconcileChildren","updateHOOK","document","createTextNode","createElement","oldPoint","children","updateHost","concat","oldFibers","newFibers","fiberize","reused","newFiber","oldFiber","prevFiber","Fiber","REPLACE","vnode","data","HOST","nodeValue","rest","arguments","pop","vdom","container","initContext","setters","newContext","fn","f","ctx","context","subscribe","setContext","unSubscribe"],"mappings":"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"}